import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.lang.Double

var Timer timerMv
var Timer timerBorta
var Number departureMinutesAfterMidnight

rule "Initialize startup"
when
	System started
then
	// Delay init to make sure persistance restoration has been done
	createTimer(now.plusSeconds(5)) [|
		logInfo("openhab startup timer init...", "disable/enable all to last state")
		departureMinutesAfterMidnight = 0
		sendCommand(MvWeekDaysDynamic, MvWeekDaysDynamic.state as DecimalType)
		gBelysning?.members.forEach(light | sendCommand(light, light.state as OnOffType))
		sendCommand(GarageOutlet, GarageOutlet.state as OnOffType)
		sendCommand(CarOutlet, CarOutlet.state as OnOffType)
		sendCommand(Bortabelysning, Bortabelysning.state as OnOffType)
	]
end


rule "Rule at sunset"
when
    Item Sunset_Event_Offset received update ON
then
    logInfo("Sun is going away...", "Time: " + Sunset_Time)

	// Always turn on group night lights
	gNightLights?.members.forEach(light | sendCommand(light, ON))
	
    var lessLimit = now.getYear + "-" + now.getMonthOfYear + "-" + now.getDayOfMonth + "T22:00:00"
    
    // Do not turn on light in more light group if after 22 in the evening
    if (parse(lessLimit).afterNow) {
	    gMoreLightOn?.members.forEach(light | sendCommand(light, ON))
    }

    lessLimit = now.getYear + "-" + now.getMonthOfYear + "-" + now.getDayOfMonth + "T20:00:00"

    // Do not turn on light in lesser light group if after 20 in the evening
    if (parse(lessLimit).afterNow) {
		  gLesserLightOn?.members.forEach(light | sendCommand(light, ON))
    }
end

rule "Rule at sunrise"
when
    Item Sunrise_Event_Offset received update ON
then
    logInfo("Sun is rising...", "Time: " + Sunrise_Time)

    gBelysning?.members.forEach(light | sendCommand(light, OFF))
end

rule "Turn off lights in the night"
when
	Time cron "0 59 23 * * ?"
then
	// Omit the lights in the night lights group
    gBelysning?.members.forEach(light | if (!gNightLights?.members.contains(light)) sendCommand(light, OFF))
end

rule "Turn on winter morning lights"
when
	Time cron "0 10 6 * * ?"
then
	var month = now.getMonthOfYear()
	if (month < 3 || month > 9) {
	    gMoreLightOn?.members.forEach(light | sendCommand(light, ON))
	}
end

rule "Randomize Bortabelysning"
when
	Time cron "0 1/30 23-7 * * ?"
	//Time cron "10/10 * 19-23 * * ?"
then

	if (Bortabelysning.state == ON) {
		val int lightNum = (now.getHourOfDay + now.getMinuteOfHour) % gBortabelysning?.members.size 
		val light = gBortabelysning?.members.get(lightNum)
		
		sendCommand(light, ON)
	
		createTimer(now.plusMinutes(10)) [|
			sendCommand(light, OFF)
		]
	}
end

rule "Turn on Mv dynamically week days depending of temperature"
when
	Time cron "0 1/5 3-8 ? * MON-FRI *"
	//Time cron "10/10 * 19-22 * * ?"
then
	// We have a dynamic setting
	if (departureMinutesAfterMidnight > 0) {
		var departure = now.toLocalDate.toDateTimeAtStartOfDay.plusMinutes(departureMinutesAfterMidnight.intValue)
		
		// Move start time back depending of temperature
		var start = departure.plusMinutes(-20); // Add 20 minutes as default
		
		var int temp = (Ute_Temp.state as DecimalType).intValue
		if (temp < 0) {
			start = start.plusMinutes(6 * temp)
		}

		//logInfo("times", "start: " + start + " departure: " + departure + " now: " + now)

		// Time to turn on?
		if (start.beforeNow && departure.afterNow) {
			logInfo("Current temperature", "Temperature outside: " + Ute_Temp.state)
			
			// Only start if not already active
			if ((GarageOutlet.state as OnOffType) == OFF) {
				logInfo("Turning on Mv", "Garage Outlet activated." )
				
				// Turn on garage outlet
				sendCommand(GarageOutlet, ON)
				try { Thread::sleep(500) } catch (Exception e) {}
				
				// Make sure we have no active car outlet
				sendCommand(CarOutlet, OFF)
		
				// Turn off after departure
				timerMv = createTimer(departure.plusMinutes(20)) [|
					sendCommand(CarOutlet, OFF)
					sendCommand(GarageOutlet, OFF)
			]
			} 
			else if (temp < 4) {
				// Start CarOutlet too, when closer to departure
				// 2 minutes for each celsius degree between -5 and +3
				// 1 minute for each degree less than -6
				var carOutletStart = departure
				var minutesSingle = 4 - temp
				
				// Double the minutes for the -5 to +3 interval
				var minutesDouble = 4 - Math::max(-5, temp)
				
				carOutletStart = departure.plusMinutes(-minutesSingle - minutesDouble)
				
				if (carOutletStart.beforeNow && (CarOutlet.state as OnOffType) == OFF) {
					logInfo("Turning on Car Outlet", "Car Outlet activated")
					sendCommand(CarOutlet, ON)
				}
			}
		}
		
	}
end


rule "Turn on Mv weekday mornings"
when
	Item MvWeekDaysDynamic received command
then
	departureMinutesAfterMidnight = (receivedCommand as DecimalType / 10 * 60).intValue

	if (departureMinutesAfterMidnight > 0) {
		postUpdate(MvStatus, "Dynamisk")
	} else {
		postUpdate(MvStatus, "Nollställd")
	}

end


rule "Turn on Mv now"
when
	Item MvTimerNow received command
then
	if (timerMv != null) {
		timerMv.cancel
		timerMv = null
	}

	/*
	 * Sample event triggering
	 sendCommand(Sunset_Event_Offset, ON)
	 *
	 */

	sendCommand(GarageOutlet, ON)
	try { Thread::sleep(500) } catch (Exception e) {}

	// Make sure we have no active car outlet
	sendCommand(CarOutlet, OFF)
				
	var minutes = (receivedCommand as DecimalType).intValue

	timerMv = createTimer(now.plusMinutes(minutes)) [|
		sendCommand(GarageOutlet, OFF)
	]

	postUpdate(MvStatus, "Aktiv")
	postUpdate(MvTimerDelay, 0)
	postUpdate(MvTimerStart, 0)

	logInfo("Timer OFF in minutes...", "" + minutes)
end

rule "Turn on Mv delayed"
when
	Item MvTimerDelay received command
then
	if (timerMv != null) {
		timerMv.cancel
		timerMv = null
	}

	sendCommand(GarageOutlet, OFF)

	var minutes = (receivedCommand as DecimalType).intValue

	timerMv = createTimer(now.plusMinutes(minutes)) [|
		sendCommand(GarageOutlet, ON)
		try { Thread::sleep(500) } catch (Exception e) {}
		// Make sure we have no active car outlet
		sendCommand(CarOutlet, OFF)
		
		// Turn off after 2 hours
		timerMv = createTimer(now.plusMinutes(120)) [|
			sendCommand(GarageOutlet, OFF)
		]
	]

	postUpdate(MvStatus, "Fördröjd")
	postUpdate(MvTimerNow, 0)
	postUpdate(MvTimerStart, 0)

	logInfo("Time ON in minutes...", "" + minutes)
end

rule "Turn on Mv start"
when
	Item MvTimerStart received command
then
	if (timerMv != null) {
		timerMv.cancel
		timerMv = null
	}

	sendCommand(GarageOutlet, OFF)

	var minutesAfterMidnight = (receivedCommand as DecimalType / 10 * 60).intValue

	var start = now.toLocalDate.plusDays(1).toDateTimeAtStartOfDay.plusMinutes(minutesAfterMidnight)

	timerMv = createTimer(start) [|
		sendCommand(GarageOutlet, ON)
		try { Thread::sleep(500) } catch (Exception e) {}
		// Make sure we have no active car outlet
		sendCommand(CarOutlet, OFF)

		// Turn off after 2 hours
		timerMv = createTimer(now.plusMinutes(120)) [|
			sendCommand(GarageOutlet, OFF)
		]
	]

	postUpdate(MvStatus, "Starttid " + start.getHourOfDay + ":" + start.getMinuteOfHour)
	postUpdate(MvTimerNow, 0)
	postUpdate(MvTimerDelay, 0)

	logInfo("Time ON tomorrow at...", "" + start)
end

rule "Mv Zero"
when
	Item GarageOutlet received command OFF
then
	if (timerMv != null) {
		timerMv.cancel
		timerMv = null
	}

	if (departureMinutesAfterMidnight > 0) {
		postUpdate(MvStatus, "Dynamisk")	
	} else {
		postUpdate(MvStatus, "Nollställd")
	}
	
	postUpdate(MvTimerNow, 0)
	postUpdate(MvTimerDelay, 0)
	postUpdate(MvTimerStart, 0)

	logInfo("Zero out...", "")
end
