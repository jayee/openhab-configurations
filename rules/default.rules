import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.lang.Double

var Timer timerMv

rule "Initialize startup"
when
	System started
then
	// Delay init to make sure persistance restoration has been done
	createTimer(now.plusSeconds(5)) [|
		logInfo("openhab startup timer init...", "disable/enable all to last state")
		gBelysning?.members.forEach(light | sendCommand(light, light.state as OnOffType))
		sendCommand(GarageOutlet, GarageOutlet.state as OnOffType)
	]
end


rule "Rule at sunset"
when
    Item Sunset_Event_Offset received update ON
then
    logInfo("Sun is going away...", "Time: " + Sunset_Time)

    // Light On more group
    gMoreLightOn?.members.forEach(light | sendCommand(light, ON))

    var lessLimit = now.getYear + "-" + now.getMonthOfYear + "-" + now.getDayOfMonth + "T20:00:00"

    // Do not turn on light in lesser light group if after 20 in evening
    if (parse(lessLimit).afterNow) {
		  gLesserLightOn?.members.forEach(light | sendCommand(light, ON))
    }
end

rule "Rule at sunrise"
when
    Item Sunrise_Event_Offset received update ON
then
    logInfo("Sun is rising...", "Time: " + Sunrise_Time)

    gBelysning?.members.forEach(light | sendCommand(light, OFF))
end

rule "Turn off lights in the night"
when
	Time cron "0 59 23 * * ?"
then
	// Omit the lights in the night lights group
    gBelysning?.members.forEach(light | if (!gNightLights?.members.contains(light)) sendCommand(light, OFF))
end

rule "Turn on winter morning lights"
when
	Time cron "0 10 6 * * ?"
then
	var month = now.getMonthOfYear()
	if (month < 3 || month > 9) {
	    gMoreLightOn?.members.forEach(light | sendCommand(light, ON))
	}
end


rule "Turn on Mv now"
when
	Item MvTimerNow received command
then
	if (timerMv != null) {
		timerMv.cancel
		timerMv = null
	}

	/*
	 * Sample event triggering
	 sendCommand(Sunset_Event_Offset, ON)
	 *
	 */

	sendCommand(GarageOutlet, ON)

	var minutes = (receivedCommand as DecimalType).intValue

	timerMv = createTimer(now.plusMinutes(minutes)) [|
		sendCommand(GarageOutlet, OFF)
	]

	postUpdate(MvStatus, "Aktiv")
	postUpdate(MvTimerDelay, 0)
	postUpdate(MvTimerStart, 0)

	logInfo("Timer OFF in minutes...", "" + minutes)
end

rule "Turn on Mv delayed"
when
	Item MvTimerDelay received command
then
	if (timerMv != null) {
		timerMv.cancel
		timerMv = null
	}

	sendCommand(GarageOutlet, OFF)

	var minutes = (receivedCommand as DecimalType).intValue

	timerMv = createTimer(now.plusMinutes(minutes)) [|
		sendCommand(GarageOutlet, ON)

		// Turn off after 2 hours
		timerMv = createTimer(now.plusMinutes(120)) [|
			sendCommand(GarageOutlet, OFF)
		]
	]

	postUpdate(MvStatus, "Delayed")
	postUpdate(MvTimerNow, 0)
	postUpdate(MvTimerStart, 0)

	logInfo("Time ON in minutes...", "" + minutes)
end

rule "Turn on Mv start"
when
	Item MvTimerStart received command
then
	if (timerMv != null) {
		timerMv.cancel
		timerMv = null
	}

	sendCommand(GarageOutlet, OFF)

	var minutesAfterMidnight = (receivedCommand as DecimalType / 10 * 60).intValue

	var start = now.toLocalDate.plusDays(1).toDateTimeAtStartOfDay.plusMinutes(minutesAfterMidnight)

	timerMv = createTimer(start) [|
		sendCommand(GarageOutlet, ON)

		// Turn off after 2 hours
		timerMv = createTimer(now.plusMinutes(120)) [|
			sendCommand(GarageOutlet, OFF)
		]
	]

	postUpdate(MvStatus, "Starttid " + start.getHourOfDay + ":" + start.getMinuteOfHour)
	postUpdate(MvTimerNow, 0)
	postUpdate(MvTimerDelay, 0)

	logInfo("Time ON tomorrow at...", "" + start)
end

rule "Mv Zero"
when
	Item GarageOutlet received command OFF
then
	if (timerMv != null) {
		timerMv.cancel
		timerMv = null
	}

	postUpdate(MvStatus, "Nollst√§lld")
	postUpdate(MvTimerNow, 0)
	postUpdate(MvTimerDelay, 0)
	postUpdate(MvTimerStart, 0)

	logInfo("Zero out...", "")
end
